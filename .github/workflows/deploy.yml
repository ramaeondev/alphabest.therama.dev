
name: Deploy to AWS S3

on:
  push:
    branches: [ main ]
  workflow_dispatch:


jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Capture start time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Clean install dependencies
        run: |
            rm -rf node_modules package-lock.json
            npm cache clean --force
            npm install
      
      - name: Prepare meta files
        run: |
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          mkdir -p public/meta
          cp README.md public/meta/${REPO_NAME}.md
          cp package.json public/meta/
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          
      - name: Upload README to S3
        uses: ramaeondev/therama.dev/.github/actions/upload-to-s3@master
        with:
          source: public/meta/${{ env.REPO_NAME }}.md
          destination: readme/${{ env.REPO_NAME }}.md
          bucket: ${{ secrets.S3_UPLOAD_BUCKET }}
          region: ${{ secrets.AWS_UPLOAD_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_GLOBAL }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_GLOBAL }}
           
      - name: Post version to Supabase
        uses: ramaeondev/therama.dev/.github/actions/post-project-version@master        
        
      - name: Build
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_GLOBAL }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_GLOBAL }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3
        run: aws s3 sync ./dist s3://${{ secrets.S3_BUCKET }} --delete
        
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
            
      - name: Log deployment to Supabase
        run: |
            VERSION=$(jq -r '.version' package.json)
            STATUS=$(jq -r '.status' package.json)
            PROJECT_ID=$(jq -r '.project_id' package.json)
            log_deployment=$(jq -r '.log_deployment' package.json)
            COMMIT_MESSAGE=$(git log -1 --pretty=%B | sed 's/"/\\"/g')
            HOME_PAGE=$(jq -r '.homepage' package.json)

            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))
            IS_SUCCESS=${{ job.status == 'success' && 'true' || 'false' }}
            
            # Create JSON payload with proper escaping
            JSON_PAYLOAD=$(cat <<EOF
            {
              "project_id": "$PROJECT_ID",
              "version": "$VERSION",
              "status": "$STATUS",
              "github_sha": "${{ github.sha }}",
              "github_ref": "${{ github.ref }}",
              "actor": "${{ github.actor }}",
              "commit_message": "$COMMIT_MESSAGE",
              "deployment_url":  "$HOME_PAGE",
              "duration_in_seconds": $DURATION,
              "is_success": $IS_SUCCESS
            }
            EOF
            )
            
            # Send the request with properly formatted JSON
            curl -s -X POST "$log_deployment" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD"
    